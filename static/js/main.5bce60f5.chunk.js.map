{"version":3,"sources":["form/BasicForm.js","App.js","serviceWorker.js","index.js"],"names":["BasicForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNameChange","event","setState","name","target","value","handleEmailChange","email","handleSubmit","preventDefault","_this$state","state","alert","concat","validateName","nameError","length","validateEmail","emailError","react_default","a","createElement","onSubmit","className","htmlFor","id","placeholder","onBlur","onChange","type","Component","App","BasicForm_BasicForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEqBA,cACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,iBAAmB,SAAAC,GACfR,EAAKS,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SAXpBZ,EAclBa,kBAAoB,SAAAL,GAChBR,EAAKS,SAAS,CAACK,MAAON,EAAMG,OAAOC,SAfrBZ,EAkBlBe,aAAe,SAAAP,GACXA,EAAMQ,iBADa,IAAAC,EAEKjB,EAAKkB,MAArBR,EAFWO,EAEXP,KAAMI,EAFKG,EAELH,MAEdK,MAAK,+CAAAC,OACWV,EADX,gCAAAU,OAEYN,KAxBHd,EA2BlBqB,aAAc,WAAK,IACRX,EAAQV,EAAKkB,MAAbR,KACPV,EAAKS,SAAS,CACVa,UAAWZ,EAAKa,OAAS,EAAK,KAAO,2CA9B3BvB,EAkClBwB,cAAgB,WAAM,IACVV,EAAWd,EAAKkB,MAAhBJ,MACRd,EAAKS,SAAS,CACVgB,WAAYX,EAAMS,OAAS,EAAI,KAAO,4CAnC1CvB,EAAKkB,MAAQ,CACTR,KAAM,GACNI,MAAM,GACNQ,UAAW,GACXG,WAAY,IANFzB,wEA6Cd,OACI0B,EAAAC,EAAAC,cAAA,QAAMC,SAAU1B,KAAKY,cACjBW,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,QAAf,QACAL,EAAAC,EAAAC,cAAA,SACIlB,KAAO,OACPoB,UAAY,eACZE,GAAK,OACLC,YAAc,aACdrB,MAAUT,KAAKe,MAAMR,KACrBwB,OAAS/B,KAAKkB,aACdc,SAAYhC,KAAKI,mBAE3BmB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAmB3B,KAAKe,MAAMI,YAI3CI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,SAAOG,QAAS,SAAhB,SACAL,EAAAC,EAAAC,cAAA,SACIlB,KAAK,QACLoB,UAAU,eACVE,GAAG,QACHC,YAAY,cACZrB,MAAQT,KAAKe,MAAMJ,MACnBoB,OAAS/B,KAAKqB,cACdW,SAAYhC,KAAKU,oBAEzBa,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAmB3B,KAAKe,MAAMO,aAG7CC,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASN,UAAU,6BAAhC,kBA7EuBO,aC0BxBC,0LArBX,OACEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,wBAChBJ,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAEbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAEfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACW,EAAD,OAGFb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAfPO,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5bce60f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class BasicForm extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            name: \"\",\n            email:\"\",\n            nameError: \"\",\n            emailError: \"\",\n        }\n    }\n\n    handleNameChange = event => {\n        this.setState({name: event.target.value})\n    }\n\n    handleEmailChange = event => {\n        this.setState({email: event.target.value})\n    }\n\n    handleSubmit = event =>{\n        event.preventDefault(); // Prevent browser page reload\n        const { name, email } = this.state;\n\n        alert(`Your state values \\n\n                name: ${name} \\n\n                email: ${email}`);\n    }\n\n    validateName= () =>{\n        const {name} = this.state;\n        this.setState({\n            nameError: name.length > 3 ?  null : 'Name must be longer than 3 characters' \n        })\n    }\n\n    validateEmail = () => {\n        const { email }  = this.state\n        this.setState({\n            emailError: email.length > 3 ? null : 'Email must be longer than 3 characters'\n        })\n    }\n\n    render(){\n        //const isValidName = this.state.name.length > 3;\n        //const isValidEmail =  this.state.email.length > 3;\n\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"formGroup\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        name = \"name\"\n                        className = \"form-control\"\n                        id = \"name\"\n                        placeholder = \"Enter name\"\n                        value =  {this.state.name}\n                        onBlur= {this.validateName}\n                        onChange = {this.handleNameChange}\n                    />\n              <div className='invalidFeedback'>{this.state.nameError}</div>\n\n                </div>\n\n                <div className=\"formGroup\">\n                    <label htmlFor= \"email\" >Email</label>\n                    <input \n                        name=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        placeholder=\"Enver email\"\n                        value= {this.state.email}\n                        onBlur= {this.validateEmail}\n                        onChange = {this.handleEmailChange}\n                    />\n                <div className='invalidFeedback'>{this.state.emailError}</div>\n\n                </div>\n                <button type=\"submit\" className=\"btn btn-success btn-block\">\n                    Submit\n                </button>\n            </form>\n        )\n    }\n}","import React, { Component } from 'react';\nimport BasicForm from './form/BasicForm'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header col-md-12\">\n          <h1>React form app</h1>\n        </header>\n        <div className=\"row\">\n\n          <div className=\"col-md-4\"></div>\n\n          <div className=\"col-md-4 content\">\n            <BasicForm/>\n          </div>\n\n          <div className=\"col-md-4\"></div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}