{"version":3,"sources":["login/components/login-layout.js","login/containers/login.js","nav/components/nav.js","App.js","serviceWorker.js","index.js"],"names":["LoginLayout","props","react_default","a","createElement","Paper_default","onSubmit","handleSubmit","className","TextField_default","name","id","placeholder","value","onBlur","validateName","onChange","handleNameChange","nameError","email","validateEmail","handleEmailChange","emailError","Button_default","variant","color","type","LoginContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","handleSubmitForm","preventDefault","_this$state","state","alert","concat","length","components_login_layout","Component","NavBar","AppBar_default","position","Toolbar_default","Typography_default","App","Grid_default","container","spacing","item","xs","md","nav","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bb72582.chunk.js","sourcesContent":["import React from 'react';\nimport './login-layout.css'\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst LoginLayout = props => {\n    return (\n        <Paper >\n            <form onSubmit={props.handleSubmit} className=\"form-login\">\n                <div className=\"formGroup\">\n                    <TextField\n                        name=\"name\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        placeholder=\"Enter name\"\n                        value={props.name}\n                        onBlur={props.validateName}\n                        onChange={props.handleNameChange}\n                    />\n                    <div className='invalidFeedback'>\n                        {props.nameError}\n                        </div>\n                </div>\n\n                <div className=\"formGroup\">\n                    <TextField\n                        name=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        placeholder=\"Enver email\"\n                        value={props.email}\n                        onBlur={props.validateEmail}\n                        onChange={props.handleEmailChange}\n                    />\n                    <div className='invalidFeedback'>\n                        {props.emailError}\n                    </div>\n                </div>\n\n                <Button variant=\"contained\" color=\"primary\"\n                    type=\"submit\"\n                >\n                    Submit\n                </Button>\n\n            </form>\n        </Paper>\n    )\n}\nexport default LoginLayout;","import React, { Component } from 'react';\nimport LoginLayout from '../components/login-layout';\nimport axios from 'axios';\n\nclass LoginContainer extends Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            name: \"\",\n            email:\"\",\n            nameError: \"\",\n            emailError: \"\",\n        }\n    }\n\n    handleNameChange = event => {\n        this.setState({name: event.target.value})\n    }\n\n    handleEmailChange = event => {\n        this.setState({email: event.target.value})\n    }\n\n    handleSubmitForm = event =>{\n        event.preventDefault(); // Prevent browser page reload\n        const { name, email } = this.state;\n\n        alert(`Your state values \\n\n                name: ${name} \\n\n                email: ${email}`);\n    }\n\n    validateName= () => {\n        const {name} = this.state;\n        this.setState({\n            nameError: name.length > 3 ?  null : 'Name must be longer than 3 characters' \n        })\n    }\n\n    validateEmail = () => {\n        const { email }  = this.state\n        this.setState({\n            emailError: email.length > 3 ? null : 'Email must be longer than 3 characters'\n        })\n    }\n\n    render(){\n        return(\n            <LoginLayout\n                handleSubmit = {this.handleSubmitForm}\n                handleNameChange = {this.handleNameChange}\n                handleEmailChange = {this.handleEmailChange}\n                validateName = {this.validateName}\n                validateEmail = {this.validateEmail}\n                emailError = {this.state.emailError}\n                nameError = {this.state.nameError}\n            >\n            </LoginLayout>\n        )\n    }\n}\nexport default LoginContainer;","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst NavBar = () => {\n    return(\n        <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"title\" color=\"inherit\">\n                Login\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport Login from './login/containers/login'\nimport Nav from './nav/components/nav'\nimport Grid from '@material-ui/core/Grid';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Grid container spacing={24}>\n        <Grid item xs={12} md={12}>\n          <Nav></Nav>\n        </Grid>\n      \n        <Grid item xs={12} md={4} />\n\n        <Grid item xs={12} md={4}>\n          <Login/>\n        </Grid>\n\n        <Grid item xs={12} md={4} />\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}